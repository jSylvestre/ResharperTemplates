<TemplatesExport family="Live Templates">
  <Template uid="e8b91bdc-c80b-4e60-b170-2e6322f926c5" shortcut="Evict" description="Evict NHibernate Entity" text="NHibernateSessionManager.Instance.GetSession().Evict($entity$);" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="entity" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ef2508fe-3297-4e03-be51-9867d8480664" shortcut="GetNullable" description="Get nullable" text="var $EntitityName$ = Repository.OfType&lt;$Entity$&gt;().GetNullableByID(id);&#xD;&#xA;if ($EntitityName$ == null)&#xD;&#xA;{&#xD;&#xA;	return this.RedirectToAction(a =&gt; a.$List$);&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="suggestVariableType()" initialRange="0" />
      <Variable name="EntitityName" expression="suggestVariableName()" initialRange="0" />
      <Variable name="List" expression="complete()" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="6efda15f-9dba-4149-8f1f-eaefc1af3493" shortcut="JasonBoolTests" description="A group of Repository  tests typical for the bool fields" text="        #region $BoolFieldToTest$ Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $BoolFieldToTest$ is false saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$BoolFieldToTest$IsFalseSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            $Entity$ $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$BoolFieldToTest$ = false;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.$BoolFieldToTest$);&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $BoolFieldToTest$ is true saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$BoolFieldToTest$IsTrueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$BoolFieldToTest$ = true;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue($entityVariable$.$BoolFieldToTest$);&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion $BoolFieldToTest$ Tests&#xD;&#xA;        /*&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;$BoolFieldToTest$&quot;, &quot;System.Boolean&quot;, new List&lt;string&gt;()));&#xD;&#xA;        */" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="BoolFieldToTest" expression="" initialRange="3" />
      <Variable name="entityVariable" expression="decapitalize(Entity)" initialRange="-1" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="57e98af8-8cad-4b11-aa6e-1d3ee115777f" shortcut="JasonCheckRequireTest" description="Create a check require test with most info filled out" text="/// &lt;summary&gt;&#xD;&#xA;/// Tests the $MethodName$ throws exception if $ValueToCheckFor$ not found.&#xD;&#xA;/// &lt;/summary&gt;&#xD;&#xA;[TestMethod]&#xD;&#xA;[ExpectedException(typeof(UCDArch.Core.Utils.PreconditionException))]&#xD;&#xA;public void Test$MethodName$ThrowsExceptionIf$ValueToCheckFor$NotFound()&#xD;&#xA;{&#xD;&#xA;    #region Arrange&#xD;&#xA;    $END$&#xD;&#xA;    #endregion Arrange&#xD;&#xA;&#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;        #region Act&#xD;&#xA;        Controller.$Method$;&#xD;&#xA;        #endregion Act&#xD;&#xA;    }&#xD;&#xA;    catch (Exception message)&#xD;&#xA;    {&#xD;&#xA;        #region Assert&#xD;&#xA;        Assert.AreEqual(&quot;$ErrorMessage$&quot;, message.Message);&#xD;&#xA;        #endregion Assert&#xD;&#xA;        throw;&#xD;&#xA;    }            &#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="ValueToCheckFor" expression="" initialRange="0" />
      <Variable name="Method" expression="AspMvcAction()" initialRange="2" />
      <Variable name="ErrorMessage" expression="" initialRange="0" />
      <Variable name="MethodName" expression="guessElementType(Method)" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="829089bc-09df-4276-93a9-0c8570d4bbce" shortcut="JasonDateTests" description="Test past, current, and future dates when not nullable are valid" text="        #region $DateToTest$ Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $DateToTest$ with past date will save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$DateToTest$WithPastDateWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var compareDate = DateTime.Now.AddDays(-10);&#xD;&#xA;            $Entity$ record = GetValid(99);&#xD;&#xA;            record.$DateToTest$ = compareDate;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(compareDate, record.$DateToTest$);&#xD;&#xA;            #endregion Assert		&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $DateToTest$ with current date date will save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$DateToTest$WithCurrentDateDateWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var compareDate = DateTime.Now;&#xD;&#xA;            var record = GetValid(99);&#xD;&#xA;            record.$DateToTest$ = compareDate;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(compareDate, record.$DateToTest$);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $DateToTest$ with future date date will save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$DateToTest$WithFutureDateDateWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var compareDate = DateTime.Now.AddDays(15);&#xD;&#xA;            var record = GetValid(99);&#xD;&#xA;            record.$DateToTest$ = compareDate;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(compareDate, record.$DateToTest$);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion $DateToTest$ Tests&#xD;&#xA;        //expectedFields.Add(new NameAndType(&quot;$DateToTest$&quot;, &quot;System.DateTime&quot;, new List&lt;string&gt;()));" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="DateToTest" expression="" initialRange="3" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="591106f1-659a-4c84-807d-2a018ed3d9c1" shortcut="JasonFake" description="Fake a list of entities. List must already exist" text="/// &lt;summary&gt;&#xD;&#xA;/// Fakes the $entity$s.&#xD;&#xA;/// Author: $me$&#xD;&#xA;/// Create: $now$&#xD;&#xA;/// &lt;/summary&gt;&#xD;&#xA;/// &lt;param name=&quot;count&quot;&gt;The number of $entity$s to add.&lt;/param&gt;&#xD;&#xA;private void Fake$entity$s(int count)&#xD;&#xA;{&#xD;&#xA;    var offSet = $entity$s.Count;&#xD;&#xA;    for (int i = 0; i &lt; count; i++)&#xD;&#xA;    {&#xD;&#xA;		$entity$s.Add(CreateValidEntities.$entity$(i + 1 + offSet));&#xD;&#xA;		$entity$s[i + offSet].SetIdTo(i + 1 + offSet);&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="entity" expression="" initialRange="0" />
      <Variable name="me" expression="getFullUserName()" initialRange="-1" />
      <Variable name="now" expression="getCurrentDate(&quot;yyyy/MM/dd&quot;)" initialRange="-1" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c5b28bb1-114e-4c6c-b0f4-4f90e93c9ed6" shortcut="JasonFakeEntity" description="Fake an entify for a controller. Need the containg static class" text="        public static void Fake$entity$s(int count, IRepository&lt;$entity$&gt; repository)&#xD;&#xA;        {&#xD;&#xA;            var records = new List&lt;$entity$&gt;();&#xD;&#xA;            Fake$entity$s(count, repository, records);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public static void Fake$entity$s(int count, IRepository&lt;$entity$&gt; repository, List&lt;$entity$&gt; specificRecords)&#xD;&#xA;        {&#xD;&#xA;            var records = new List&lt;$entity$&gt;();&#xD;&#xA;            var specificRecordsCount = 0;&#xD;&#xA;            if (specificRecords != null)&#xD;&#xA;            {&#xD;&#xA;                specificRecordsCount = specificRecords.Count;&#xD;&#xA;                for (int i = 0; i &lt; specificRecordsCount; i++)&#xD;&#xA;                {&#xD;&#xA;                    records.Add(specificRecords[i]);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            for (int i = 0; i &lt; count; i++)&#xD;&#xA;            {&#xD;&#xA;                records.Add(CreateValidEntities.$entity$(i + specificRecordsCount + 1));&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var totalCount = records.Count;&#xD;&#xA;            for (int i = 0; i &lt; totalCount; i++)&#xD;&#xA;            {&#xD;&#xA;                records[i].SetIdTo(i + 1);&#xD;&#xA;                int i1 = i;&#xD;&#xA;                repository&#xD;&#xA;                    .Expect(a =&gt; a.GetNullableById(i1 + 1))&#xD;&#xA;                    .Return(records[i])&#xD;&#xA;                    .Repeat&#xD;&#xA;                    .Any();&#xD;&#xA;            }&#xD;&#xA;            repository.Expect(a =&gt; a.GetNullableById(totalCount + 1)).Return(null).Repeat.Any();&#xD;&#xA;            repository.Expect(a =&gt; a.Queryable).Return(records.AsQueryable()).Repeat.Any();&#xD;&#xA;            repository.Expect(a =&gt; a.GetAll()).Return(records).Repeat.Any();&#xD;&#xA;        }" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="entity" expression="" initialRange="1" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="245b54b4-26ec-4aa4-82ab-ed07d0b3bc94" shortcut="JasonFakeEntityWithTypeId" description="Fake an entify for a controller. Need the containg static class" text="        public static void Fake$entity$s(int count, IRepositoryWithTypedId&lt;$entity$, $type$&gt; repository)&#xD;&#xA;        {&#xD;&#xA;            var records = new List&lt;$entity$&gt;();&#xD;&#xA;            Fake$entity$s(count, repository, records);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public static void Fake$entity$s(int count, IRepositoryWithTypedId&lt;$entity$, $type$&gt; repository, List&lt;$entity$&gt; specificRecords)&#xD;&#xA;        {&#xD;&#xA;            var records = new List&lt;$entity$&gt;();&#xD;&#xA;            var specificRecordsCount = 0;&#xD;&#xA;            if (specificRecords != null)&#xD;&#xA;            {&#xD;&#xA;                specificRecordsCount = specificRecords.Count;&#xD;&#xA;                for (int i = 0; i &lt; specificRecordsCount; i++)&#xD;&#xA;                {&#xD;&#xA;                    records.Add(specificRecords[i]);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            for (int i = 0; i &lt; count; i++)&#xD;&#xA;            {&#xD;&#xA;                records.Add(CreateValidEntities.$entity$(i + specificRecordsCount + 1));&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var totalCount = records.Count;&#xD;&#xA;            for (int i = 0; i &lt; totalCount; i++)&#xD;&#xA;            {&#xD;&#xA;                records[i].SetIdTo((i + 1).ToString());&#xD;&#xA;                int i1 = i;&#xD;&#xA;                repository&#xD;&#xA;                    .Expect(a =&gt; a.GetNullableById((i1 + 1).ToString()))&#xD;&#xA;                    .Return(records[i])&#xD;&#xA;                    .Repeat&#xD;&#xA;                    .Any();&#xD;&#xA;            }&#xD;&#xA;            repository.Expect(a =&gt; a.GetNullableById((totalCount + 1).ToString())).Return(null).Repeat.Any();&#xD;&#xA;            repository.Expect(a =&gt; a.Queryable).Return(records.AsQueryable()).Repeat.Any();&#xD;&#xA;            repository.Expect(a =&gt; a.GetAll()).Return(records).Repeat.Any();&#xD;&#xA;        }" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="entity" expression="" initialRange="1" />
      <Variable name="type" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="61616fc3-7c04-46ae-9fd0-9051c5267b53" shortcut="JasonGetArguments" description="GetArgumentsForCallsMadeOn" text="            $Entity$Repository.AssertWasCalled(a =&gt; a.EnsurePersistent(Arg&lt;$Entity$&gt;.Is.Anything));&#xD;&#xA;            var args = ($Entity$)$Entity$Repository.GetArgumentsForCallsMadeOn(a =&gt; a.EnsurePersistent(Arg&lt;$Entity$&gt;.Is.Anything))[0][0]; &#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="1" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f4e6dc01-3980-4322-bddf-50f59fb6e5d2" shortcut="JasonIntTests" description="Min Max Null" text="        #region $FieldToTest$ Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with null value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithNullValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            record.$FieldToTest$ = null;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNull(record.$FieldToTest$);&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            #endregion Assert		&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with max int value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithMaxIntValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var record = GetValid(9);&#xD;&#xA;            record.$FieldToTest$ = int.MaxValue;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(int.MaxValue, record.$FieldToTest$);&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with min int value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithMinIntValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var record = GetValid(9);&#xD;&#xA;            record.$FieldToTest$ = int.MinValue;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(int.MinValue, record.$FieldToTest$);&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion $FieldToTest$ Tests&#xD;&#xA;        //expectedFields.Add(new NameAndType(&quot;$FieldToTest$&quot;, &quot;System.Int32&quot;, new List&lt;string&gt;()));" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="FieldToTest" expression="" initialRange="3" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="121ea2d5-1b38-48b7-b688-68ada899184b" shortcut="JasonMockIdentity" description="Call to MockHttpContext" text="Controller.ControllerContext.HttpContext = new MockHttpContext(1, new[] { &quot;&quot; });" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b14d6409-b5a8-41b6-970f-19aafde9953e" shortcut="JasonRegion" description="Region with description at start and end" text="#region $Description$&#xD;&#xA;		 $END$&#xD;&#xA;	#endregion $Description$" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Description" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="045d16fe-f037-4750-8a98-8e95b69487fa" shortcut="JasonRegion2" description="Nested regions" text="        #region $Description$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;        #region Valid Tests&#xD;&#xA;&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;&#xD;&#xA;        #region Cascade Tests&#xD;&#xA;        &#xD;&#xA;        #endregion Cascade Tests&#xD;&#xA;        #endregion $Description$ Tests" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables>
      <Variable name="Description" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="94969b7f-ffa7-4aa5-abe8-910e1e6f32d3" shortcut="JasonRepository" description="Create a List, repository, and commented out code to move" text="protected List&lt;$Entity$&gt; $Entity$s { get; set; }&#xD;&#xA;protected IRepository&lt;$Entity$&gt; $Entity$Repository { get; set; }&#xD;&#xA;&#xD;&#xA;public $CLASS$()&#xD;&#xA;{&#xD;&#xA;    $Entity$s = new List&lt;$Entity$&gt;();&#xD;&#xA;    $Entity$Repository = FakeRepository&lt;$Entity$&gt;();&#xD;&#xA;    Controller.Repository.Expect(a =&gt; a.OfType&lt;$Entity$&gt;()).Return($Entity$Repository).Repeat.Any();&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="suggestVariableType()" initialRange="0" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="b73c5a64-8cf1-4bb5-bf86-78bcbb216ef2" shortcut="JasonStringTests" description="A group of Repository  tests typical for the Name Field" text="        #region $FieldToTest$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with null value does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithNullValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = null;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: may not be null or empty&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with empty string does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithEmptyStringDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = string.Empty;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: may not be null or empty&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with spaces only does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithSpacesOnlyDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = &quot; &quot;;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: may not be null or empty&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with too long value does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithTooLongValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = &quot;x&quot;.RepeatTimes(($MaxLength$ + 1));&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                Assert.AreEqual($MaxLength$ + 1, $entityVariable$.$FieldToTest$.Length);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: length must be between 0 and $MaxLength$&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;&#xD;&#xA;        #region Valid Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with one character saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithOneCharacterSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot;x&quot;;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with long value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithLongValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot;x&quot;.RepeatTimes($MaxLength$);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual($MaxLength$, $entityVariable$.$FieldToTest$.Length);&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;        #endregion $FieldToTest$ Tests&#xD;&#xA;        /*&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;$FieldToTest$&quot;, &quot;System.String&quot;, new List&lt;string&gt;&#xD;&#xA;            {&#xD;&#xA;                 &quot;[NHibernate.Validator.Constraints.LengthAttribute((Int32)$MaxLength$)]&quot;, &#xD;&#xA;                 &quot;[UCDArch.Core.NHibernateValidator.Extensions.RequiredAttribute()]&quot;&#xD;&#xA;            }));&#xD;&#xA;        */" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="FieldToTest" expression="" initialRange="3" />
      <Variable name="entityVariable" expression="decapitalize(Entity)" initialRange="-1" />
      <Variable name="MaxLength" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0e890d96-8a04-46e5-b8be-ce167a3cbfde" shortcut="JasonStringTestsLengthOnly" description="String tests where only the max length is validated" text="        #region $FieldToTest$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with too long value does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithTooLongValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = &quot;x&quot;.RepeatTimes(($MaxLength$ + 1));&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                Assert.AreEqual($MaxLength$ + 1, $entityVariable$.$FieldToTest$.Length);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: length must be between 0 and $MaxLength$&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;&#xD;&#xA;        #region Valid Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with null value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithNullValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = null;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with empty string saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithEmptyStringSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = string.Empty;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with one space saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithOneSpaceSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot; &quot;;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with one character saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithOneCharacterSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot;x&quot;;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with long value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithLongValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot;x&quot;.RepeatTimes($MaxLength$);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual($MaxLength$, $entityVariable$.$FieldToTest$.Length);&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;        #endregion $FieldToTest$ Tests&#xD;&#xA;        /*&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;$FieldToTest$&quot;, &quot;System.String&quot;, new List&lt;string&gt;&#xD;&#xA;            {&#xD;&#xA;                 &quot;[NHibernate.Validator.Constraints.LengthAttribute((Int32)$MaxLength$)]&quot;&#xD;&#xA;            }));&#xD;&#xA;        */" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="FieldToTest" expression="" initialRange="3" />
      <Variable name="entityVariable" expression="decapitalize(Entity)" initialRange="-1" />
      <Variable name="MaxLength" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="4fe11da8-83d2-4fb6-9fea-75dc43124724" shortcut="JasonTest" description="Create test method" text="&#xD;&#xA;[TestMethod]&#xD;&#xA;public void Test$Description$()&#xD;&#xA;{&#xD;&#xA;	#region Arrange&#xD;&#xA;	$END$&#xD;&#xA;	#endregion Arrange&#xD;&#xA;	&#xD;&#xA;	#region Act&#xD;&#xA;	#endregion Act&#xD;&#xA;	&#xD;&#xA;	#region Assert&#xD;&#xA;	#endregion Assert		&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Description" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="4cb2cc7f-ee84-4480-a86f-f8abededcd4b" shortcut="JasonTestWithException" description="Generat test that will generate an exception with a validation message." text="        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with A value of $TestValue$ does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithAValueOf$TestValue$DoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = $TestValue$;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                Assert.AreEqual($entityVariable$.$FieldToTest$, $TestValue$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }	&#xD;&#xA;        }" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="entityVariable" expression="decapitalize(Entity)" initialRange="-1" />
      <Variable name="FieldToTest" expression="" initialRange="2" />
      <Variable name="TestValue" expression="" initialRange="2" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e96f44af-1afb-4540-86ce-bb0ee0d2e18a" shortcut="JasonViewModel" description="Create a new view model" text="public class $EntityName$ViewModel {&#xD;&#xA;&#xD;&#xA;	public static $EntityName$ViewModel Create(IRepository repository)&#xD;&#xA;	{&#xD;&#xA;		Check.Require(repository != null, &quot;Repository is required.&quot;);&#xD;&#xA;		&#xD;&#xA;		var viewModel = new $EntityName$ViewModel(){};&#xD;&#xA;		&#xD;&#xA;		return viewModel;&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="EntityName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
</TemplatesExport>