using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using $ProjectName$.Core.Domain;
using $ProjectName$.Tests.Core;
using $ProjectName$.Tests.Core.Extensions;
using $ProjectName$.Tests.Core.Helpers;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentNHibernate.Testing;
using UCDArch.Core.PersistanceSupport;
using UCDArch.Data.NHibernate;
using UCDArch.Testing.Extensions;

namespace $NAMESPACE$
{
	/// <summary>
	/// Entity Name:		$Entity$
	/// LookupFieldName:	$LookupField$
	/// </summary>
	[TestClass]
	public class $CLASS$ : AbstractRepositoryTests<$Entity$, int, $Entity$Map>
	{
		/// <summary>
        /// Gets or sets the $Entity$ repository.
        /// </summary>
        /// <value>The $Entity$ repository.</value>
		public IRepository<$Entity$> $Entity$Repository { get; set; }
		
		#region Init and Overrides

        /// <summary>
        /// Initializes a new instance of the <see cref="$Entity$RepositoryTests"/> class.
        /// </summary>
        public $CLASS$()
        {
            $Entity$Repository = new Repository<$Entity$>();
        }

        /// <summary>
        /// Gets the valid entity of type T
        /// </summary>
        /// <param name="counter">The counter.</param>
        /// <returns>A valid entity of type T</returns>
        protected override $Entity$ GetValid(int? counter)
        {
            return CreateValidEntities.$Entity$(counter);
        }

        /// <summary>
        /// A Query which will return a single record
        /// </summary>
        /// <param name="numberAtEnd"></param>
        /// <returns></returns>
        protected override IQueryable<$Entity$> GetQuery(int numberAtEnd)
        {
            return $Entity$Repository.Queryable.Where(a => a.$LookupField$.EndsWith(numberAtEnd.ToString()));
        }

        /// <summary>
        /// A way to compare the entities that were read.
        /// For example, this would have the assert.AreEqual("Comment" + counter, entity.Comment);
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="counter"></param>
        protected override void FoundEntityComparison($Entity$ entity, int counter)
        {
            Assert.AreEqual("$LookupField$" + counter, entity.$LookupField$);
        }

        /// <summary>
        /// Updates , compares, restores.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="action">The action.</param>
        protected override void UpdateUtility($Entity$ entity, ARTAction action)
        {
            const string updateValue = "Updated";
            switch (action)
            {
                case ARTAction.Compare:
                    Assert.AreEqual(updateValue, entity.$LookupField$);
                    break;
                case ARTAction.Restore:
                    entity.$LookupField$ = RestoreValue;
                    break;
                case ARTAction.Update:
                    RestoreValue = entity.$LookupField$;
                    entity.$LookupField$ = updateValue;
                    break;
            }
        }

        /// <summary>
        /// Loads the data.
        /// </summary>
        protected override void LoadData()
        {
            $Entity$Repository.DbContext.BeginTransaction();
            LoadRecords(5);
            $Entity$Repository.DbContext.CommitTransaction();
        }

        #endregion Init and Overrides	
        
        $END$
        
        
        
        
    #region Reflection of Database.

    /// <summary>
    /// Tests all fields in the database have been tested.
    /// If this fails and no other tests, it means that a field has been added which has not been tested above.
    /// </summary>
    [TestMethod]
        public void TestAllFieldsInTheDatabaseHaveBeenTested()
        {
            #region Arrange
            var expectedFields = new List<NameAndType>();

            expectedFields.Add(new NameAndType("Id", "System.Int32", new List<string>
            {
                 "[Newtonsoft.Json.JsonPropertyAttribute()]", 
                 "[System.Xml.Serialization.XmlIgnoreAttribute()]"
            }));

            #endregion Arrange

            AttributeAndFieldValidation.ValidateFieldsAndAttributes(expectedFields, typeof($Entity$));

        }

        #endregion Reflection of Database.	
		
		
	}
}