<TemplatesExport family="Live Templates">
  <Template uid="6372a52e-e448-48ee-838b-4dd7f7475182" shortcut="JasonEntityTests" description="Repository Tests of Related Entity" text="#region $Field$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$Field$WithNullValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ record = null;&#xD;&#xA;            var madeItThisFar = false;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                record = GetValid(9);&#xD;&#xA;                record.$Field$ = null;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                madeItThisFar = true;&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsTrue(madeItThisFar);&#xD;&#xA;                Assert.IsNotNull(record);&#xD;&#xA;                var results = record.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(string.Format(&quot;{0}: The {0} field is required.&quot;, &quot;$Field$&quot;));&#xD;&#xA;                Assert.IsTrue(record.IsTransient());&#xD;&#xA;                Assert.IsFalse(record.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(NHibernate.TransientObjectException))]&#xD;&#xA;        public void Test$Field$WithNewValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            var madeItThisFar = false;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                var record = GetValid(9);&#xD;&#xA;                record.$Field$ = CreateValidEntities.Category(1);&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                madeItThisFar = true;&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsTrue(madeItThisFar);&#xD;&#xA;                Assert.IsNotNull(ex);&#xD;&#xA;                Assert.AreEqual(&quot;object references an unsaved transient instance - save the transient instance before flushing. Type: $Project$.Core.Domain.$Field$, Entity: $Project$.Core.Domain.$Field$&quot;, ex.Message);&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;        #region Valid Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Field$WithExistingValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var record = GetValid(99);            &#xD;&#xA;            record.$Field$ = Repository.OfType&lt;$Field$&gt;().GetNullableById(2);&#xD;&#xA;            Assert.IsNotNull(record.$Field$);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(2, record.$Field$.Id);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;&#xD;&#xA;        #region Cascade Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestDelete$Entity$DoesNotCascadeTo$Field$()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var record = GetValid(99);&#xD;&#xA;            var relatedRecord = Repository.OfType&lt;$Field$&gt;().GetNullableById(2);&#xD;&#xA;            Assert.IsNotNull(relatedRecord);&#xD;&#xA;            record.$Field$ = relatedRecord;&#xD;&#xA;            &#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(relatedRecord);&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;&#xD;&#xA;            record = $Entity$Repository.GetNullableById(saveId);&#xD;&#xA;            Assert.IsNotNull(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.Remove(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(relatedRecord);&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNull($Entity$Repository.GetNullableById(saveId));&#xD;&#xA;            Assert.IsNotNull(Repository.OfType&lt;$Field$&gt;().GetNullableById(2));&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion Cascade Tests&#xD;&#xA;        #endregion $Field$ Tests &#xD;&#xA;		/*&#xD;&#xA;expectedFields.Add(new NameAndType(&quot;$Field$&quot;, &quot;$Project$.Core.Domain.$Field$&quot;, new List&lt;string&gt;&#xD;&#xA;{&#xD;&#xA;    &quot;[System.ComponentModel.DataAnnotations.RequiredAttribute()]&quot;&#xD;&#xA;}));&#xD;&#xA;		*/" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="Field" expression="" initialRange="2" />
      <Variable name="Project" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="6372a52e-e448-48ee-838b-4dd7f7475182" shortcut="JasonEntityTests" description="Repository Tests of Related Entity" text="#region $Field$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$Field$WithNullValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ record = null;&#xD;&#xA;            var madeItThisFar = false;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                record = GetValid(9);&#xD;&#xA;                record.$Field$ = null;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                madeItThisFar = true;&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsTrue(madeItThisFar);&#xD;&#xA;                Assert.IsNotNull(record);&#xD;&#xA;                var results = record.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(string.Format(&quot;{0}: The {0} field is required.&quot;, &quot;$Field$&quot;));&#xD;&#xA;                Assert.IsTrue(record.IsTransient());&#xD;&#xA;                Assert.IsFalse(record.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(NHibernate.TransientObjectException))]&#xD;&#xA;        public void Test$Field$WithNewValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            var madeItThisFar = false;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                var record = GetValid(9);&#xD;&#xA;                record.$Field$ = CreateValidEntities.$Field$(1);&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                madeItThisFar = true;&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsTrue(madeItThisFar);&#xD;&#xA;                Assert.IsNotNull(ex);&#xD;&#xA;                Assert.AreEqual(&quot;object references an unsaved transient instance - save the transient instance before flushing. Type: $Project$.Core.Domain.$Field$, Entity: $Project$.Core.Domain.$Field$&quot;, ex.Message);&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;        #region Valid Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Field$WithExistingValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var record = GetValid(99);            &#xD;&#xA;            record.$Field$ = Repository.OfType&lt;$Field$&gt;().GetNullableById(2);&#xD;&#xA;            Assert.IsNotNull(record.$Field$);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(2, record.$Field$.Id);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;&#xD;&#xA;        #region Cascade Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestDelete$Entity$DoesNotCascadeTo$Field$()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var record = GetValid(99);&#xD;&#xA;            var relatedRecord = Repository.OfType&lt;$Field$&gt;().GetNullableById(2);&#xD;&#xA;            Assert.IsNotNull(relatedRecord);&#xD;&#xA;            record.$Field$ = relatedRecord;&#xD;&#xA;            &#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(relatedRecord);&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;&#xD;&#xA;            record = $Entity$Repository.GetNullableById(saveId);&#xD;&#xA;            Assert.IsNotNull(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.Remove(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(relatedRecord);&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNull($Entity$Repository.GetNullableById(saveId));&#xD;&#xA;            Assert.IsNotNull(Repository.OfType&lt;$Field$&gt;().GetNullableById(2));&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion Cascade Tests&#xD;&#xA;        #endregion $Field$ Tests &#xD;&#xA;		/*&#xD;&#xA;expectedFields.Add(new NameAndType(&quot;$Field$&quot;, &quot;$Project$.Core.Domain.$Field$&quot;, new List&lt;string&gt;&#xD;&#xA;{&#xD;&#xA;    &quot;[System.ComponentModel.DataAnnotations.RequiredAttribute()]&quot;&#xD;&#xA;}));&#xD;&#xA;		*/" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="Field" expression="" initialRange="2" />
      <Variable name="Project" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
</TemplatesExport>