<TemplatesExport family="File Templates">
  <Template uid="f8b169af-e542-4ac9-88c2-6eae73786347" shortcut="" description="JasonControllerTest" text="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Web.Mvc;&#xD;&#xA;using System.Web.Routing;&#xD;&#xA;using $ProjectName$.Controllers;&#xD;&#xA;using $ProjectName$.Controllers.Filters;&#xD;&#xA;using $ProjectName$.Core.Domain;&#xD;&#xA;using $ProjectName$.Services;&#xD;&#xA;using Microsoft.VisualStudio.TestTools.UnitTesting;&#xD;&#xA;using MvcContrib.TestHelper;&#xD;&#xA;using Rhino.Mocks;&#xD;&#xA;using UCDArch.Core.PersistanceSupport;&#xD;&#xA;using UCDArch.Testing;&#xD;&#xA;using UCDArch.Web.Attributes;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;    [TestClass]&#xD;&#xA;    public class $CLASS$ : ControllerTestBase&lt;$Entity$Controller&gt;&#xD;&#xA;    {&#xD;&#xA;        private readonly Type _controllerClass = typeof($Entity$Controller);&#xD;&#xA;		public IRepository&lt;$Entity$&gt; $Entity$Repository;&#xD;&#xA;        //public IExampleService ExampleService;&#xD;&#xA;&#xD;&#xA;        #region Init&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Setups the controller.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        protected override void SetupController()&#xD;&#xA;        {&#xD;&#xA;		    $Entity$Repository = FakeRepository&lt;$Entity$&gt;();&#xD;&#xA;            //ExampleService = MockRepository.GenerateStub&lt;IExampleService&gt;();  &#xD;&#xA;            Controller = new TestControllerBuilder().CreateController&lt;$Entity$Controller&gt;($Entity$Repository);&#xD;&#xA;			//Controller = new TestControllerBuilder().CreateController&lt;$Entity$Controller&gt;($Entity$Repository, ExampleService);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void RegisterRoutes()&#xD;&#xA;        {&#xD;&#xA;            RouteRegistrar.RegisterRoutes(RouteTable.Routes);&#xD;&#xA;        }&#xD;&#xA;        #endregion Init&#xD;&#xA;&#xD;&#xA;        #region Mapping Tests&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestExampleMapping()&#xD;&#xA;        //{&#xD;&#xA;        //    &quot;~/$Entity$/YourMethod/&quot;.ShouldMapTo&lt;$Entity$Controller&gt;(a =&gt; a.YourMethod(null));&#xD;&#xA;        //}&#xD;&#xA;        #endregion Mapping Tests&#xD;&#xA;&#xD;&#xA;        #region Method Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestWriteMethodTests()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            Assert.Inconclusive(&quot;Need to write these tests&quot;);          &#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;&#xD;&#xA;            #endregion Assert		&#xD;&#xA;        }      &#xD;&#xA;        #endregion Method Tests&#xD;&#xA;&#xD;&#xA;        #region Reflection Tests&#xD;&#xA;&#xD;&#xA;        #region Controller Class Tests&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller inherits from application controller.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerInheritsFromApplicationController()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            Assert.IsNotNull(controllerClass.BaseType);&#xD;&#xA;            var result = controllerClass.BaseType.Name;&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(&quot;ApplicationController&quot;, result);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has only three attributes.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasOnlyThreeAttributes()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(3, result.Count());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has transaction attribute.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasTransactionAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;UseTransactionsByDefaultAttribute&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;UseTransactionsByDefaultAttribute not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has anti forgery token attribute.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasAntiForgeryTokenAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;UseAntiForgeryTokenOnPostByDefault&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;UseAntiForgeryTokenOnPostByDefault not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasVersionAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;VersionAttribute&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;VersionAttribute not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Controller Class Tests&#xD;&#xA;&#xD;&#xA;        #region Controller Method Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerContainsExpectedNumberOfPublicMethods()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetMethods().Where(a =&gt; a.DeclaringType == controllerClass);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.Inconclusive(&quot;Tests are still being written. When done, remove this line.&quot;);&#xD;&#xA;            Assert.AreEqual(0, result.Count(), &quot;It looks like a method was added or removed from the controller.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        //Examples&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodLogOnContainsExpectedAttributes()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethod(&quot;LogOn&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    //var expectedAttribute = controllerMethod.GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    //Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(0, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodLogOutContainsExpectedAttributes()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethod(&quot;LogOut&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    //var expectedAttribute = controllerMethod.GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    //Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(0, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes1()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(0).GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(0).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(1, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes2()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(1).GetCustomAttributes(true).OfType&lt;HttpPostAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(1).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;HttpPostAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(2, allAttributes.Count(), &quot;More than expected custom attributes found.&quot;);&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes3()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(1).GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(1).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(2, allAttributes.Count(), &quot;More than expected custom attributes found.&quot;);&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        #endregion Controller Method Tests&#xD;&#xA;&#xD;&#xA;        #endregion Reflection Tests&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="ProjectName" expression="" initialRange="0" />
      <Variable name="Entity" expression="" initialRange="0" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="ControllerTests" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
  <Template uid="cc6b4e2d-bfc2-4c45-8430-adb8ce00ffc2" shortcut="" description="JasonRepositoryTest" text="using System;&#xD;&#xA;using System.Collections;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using $ProjectName$.Core.Domain;&#xD;&#xA;using $ProjectName$.Tests.Core;&#xD;&#xA;using $ProjectName$.Tests.Core.Extensions;&#xD;&#xA;using $ProjectName$.Tests.Core.Helpers;&#xD;&#xA;using Microsoft.VisualStudio.TestTools.UnitTesting;&#xD;&#xA;using FluentNHibernate.Testing;&#xD;&#xA;using UCDArch.Core.PersistanceSupport;&#xD;&#xA;using UCDArch.Data.NHibernate;&#xD;&#xA;using UCDArch.Testing.Extensions;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;	/// &lt;summary&gt;&#xD;&#xA;	/// Entity Name:		$Entity$&#xD;&#xA;	/// LookupFieldName:	$LookupField$&#xD;&#xA;	/// &lt;/summary&gt;&#xD;&#xA;	[TestClass]&#xD;&#xA;	public class $CLASS$ : AbstractRepositoryTests&lt;$Entity$, int, $Entity$Map&gt;&#xD;&#xA;	{&#xD;&#xA;		/// &lt;summary&gt;&#xD;&#xA;        /// Gets or sets the $Entity$ repository.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;value&gt;The $Entity$ repository.&lt;/value&gt;&#xD;&#xA;		public IRepository&lt;$Entity$&gt; $Entity$Repository { get; set; }&#xD;&#xA;		&#xD;&#xA;		#region Init and Overrides&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Initializes a new instance of the &lt;see cref=&quot;$Entity$RepositoryTests&quot;/&gt; class.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public $CLASS$()&#xD;&#xA;        {&#xD;&#xA;            $Entity$Repository = new Repository&lt;$Entity$&gt;();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Gets the valid entity of type T&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;counter&quot;&gt;The counter.&lt;/param&gt;&#xD;&#xA;        /// &lt;returns&gt;A valid entity of type T&lt;/returns&gt;&#xD;&#xA;        protected override $Entity$ GetValid(int? counter)&#xD;&#xA;        {&#xD;&#xA;            return CreateValidEntities.$Entity$(counter);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// A Query which will return a single record&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;numberAtEnd&quot;&gt;&lt;/param&gt;&#xD;&#xA;        /// &lt;returns&gt;&lt;/returns&gt;&#xD;&#xA;        protected override IQueryable&lt;$Entity$&gt; GetQuery(int numberAtEnd)&#xD;&#xA;        {&#xD;&#xA;            return $Entity$Repository.Queryable.Where(a =&gt; a.$LookupField$.EndsWith(numberAtEnd.ToString()));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// A way to compare the entities that were read.&#xD;&#xA;        /// For example, this would have the assert.AreEqual(&quot;Comment&quot; + counter, entity.Comment);&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;&#xD;&#xA;        /// &lt;param name=&quot;counter&quot;&gt;&lt;/param&gt;&#xD;&#xA;        protected override void FoundEntityComparison($Entity$ entity, int counter)&#xD;&#xA;        {&#xD;&#xA;            Assert.AreEqual(&quot;$LookupField$&quot; + counter, entity.$LookupField$);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Updates , compares, restores.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;entity&quot;&gt;The entity.&lt;/param&gt;&#xD;&#xA;        /// &lt;param name=&quot;action&quot;&gt;The action.&lt;/param&gt;&#xD;&#xA;        protected override void UpdateUtility($Entity$ entity, ARTAction action)&#xD;&#xA;        {&#xD;&#xA;            const string updateValue = &quot;Updated&quot;;&#xD;&#xA;            switch (action)&#xD;&#xA;            {&#xD;&#xA;                case ARTAction.Compare:&#xD;&#xA;                    Assert.AreEqual(updateValue, entity.$LookupField$);&#xD;&#xA;                    break;&#xD;&#xA;                case ARTAction.Restore:&#xD;&#xA;                    entity.$LookupField$ = RestoreValue;&#xD;&#xA;                    break;&#xD;&#xA;                case ARTAction.Update:&#xD;&#xA;                    RestoreValue = entity.$LookupField$;&#xD;&#xA;                    entity.$LookupField$ = updateValue;&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Loads the data.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        protected override void LoadData()&#xD;&#xA;        {&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            LoadRecords(5);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Init and Overrides	&#xD;&#xA;        &#xD;&#xA;        $END$&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;    #region Reflection of Database.&#xD;&#xA;&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Tests all fields in the database have been tested.&#xD;&#xA;    /// If this fails and no other tests, it means that a field has been added which has not been tested above.&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    [TestMethod]&#xD;&#xA;        public void TestAllFieldsInTheDatabaseHaveBeenTested()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var expectedFields = new List&lt;NameAndType&gt;();&#xD;&#xA;&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;Id&quot;, &quot;System.Int32&quot;, new List&lt;string&gt;&#xD;&#xA;            {&#xD;&#xA;                 &quot;[Newtonsoft.Json.JsonPropertyAttribute()]&quot;, &#xD;&#xA;                 &quot;[System.Xml.Serialization.XmlIgnoreAttribute()]&quot;&#xD;&#xA;            }));&#xD;&#xA;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            AttributeAndFieldValidation.ValidateFieldsAndAttributes(expectedFields, typeof($Entity$));&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Reflection of Database.	&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="ProjectName" expression="" initialRange="0" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="Entity" expression="" initialRange="1" />
      <Variable name="LookupField" expression="" initialRange="3" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="RepositoryTests" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
  <Template uid="f8b169af-e542-4ac9-88c2-6eae73786347" shortcut="" description="JasonControllerTest" text="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Web.Mvc;&#xD;&#xA;using System.Web.Routing;&#xD;&#xA;using $ProjectName$.Controllers;&#xD;&#xA;using $ProjectName$.Controllers.Filters;&#xD;&#xA;using $ProjectName$.Core.Domain;&#xD;&#xA;using $ProjectName$.Services;&#xD;&#xA;using Microsoft.VisualStudio.TestTools.UnitTesting;&#xD;&#xA;using MvcContrib.TestHelper;&#xD;&#xA;using Rhino.Mocks;&#xD;&#xA;using UCDArch.Core.PersistanceSupport;&#xD;&#xA;using UCDArch.Testing;&#xD;&#xA;using UCDArch.Web.Attributes;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;    [TestClass]&#xD;&#xA;    public class $CLASS$ : ControllerTestBase&lt;$Entity$Controller&gt;&#xD;&#xA;    {&#xD;&#xA;        private readonly Type _controllerClass = typeof($Entity$Controller);&#xD;&#xA;		public IRepository&lt;$Entity$&gt; $Entity$Repository;&#xD;&#xA;        //public IExampleService ExampleService;&#xD;&#xA;		//public IRepository&lt;Example&gt; ExampleRepository;&#xD;&#xA;&#xD;&#xA;        #region Init&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Setups the controller.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        protected override void SetupController()&#xD;&#xA;        {&#xD;&#xA;		    $Entity$Repository = FakeRepository&lt;$Entity$&gt;();&#xD;&#xA;            //ExampleService = MockRepository.GenerateStub&lt;IExampleService&gt;();  &#xD;&#xA;            Controller = new TestControllerBuilder().CreateController&lt;$Entity$Controller&gt;($Entity$Repository);&#xD;&#xA;			//Controller = new TestControllerBuilder().CreateController&lt;$Entity$Controller&gt;($Entity$Repository, ExampleService);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void RegisterRoutes()&#xD;&#xA;        {&#xD;&#xA;            RouteRegistrar.RegisterRoutes(RouteTable.Routes);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;		//public $CLASS$()&#xD;&#xA;        //{&#xD;&#xA;        //    ExampleRepository = FakeRepository&lt;Example&gt;();&#xD;&#xA;        //    Controller.Repository.Expect(a =&gt; a.OfType&lt;Example&gt;()).Return(ExampleRepository).Repeat.Any();&#xD;&#xA;        //}&#xD;&#xA;        #endregion Init&#xD;&#xA;&#xD;&#xA;        #region Mapping Tests&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestExampleMapping()&#xD;&#xA;        //{&#xD;&#xA;        //    &quot;~/$Entity$/YourMethod/&quot;.ShouldMapTo&lt;$Entity$Controller&gt;(a =&gt; a.YourMethod(null));&#xD;&#xA;        //}&#xD;&#xA;        #endregion Mapping Tests&#xD;&#xA;&#xD;&#xA;        #region Method Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestWriteMethodTests()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            Assert.Inconclusive(&quot;Need to write these tests&quot;);          &#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;&#xD;&#xA;            #endregion Assert		&#xD;&#xA;        }      &#xD;&#xA;        #endregion Method Tests&#xD;&#xA;&#xD;&#xA;        #region Reflection Tests&#xD;&#xA;&#xD;&#xA;        #region Controller Class Tests&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller inherits from application controller.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerInheritsFromApplicationController()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            Assert.IsNotNull(controllerClass.BaseType);&#xD;&#xA;            var result = controllerClass.BaseType.Name;&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(&quot;ApplicationController&quot;, result);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has only three attributes.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasOnlyThreeAttributes()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(3, result.Count());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has transaction attribute.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasTransactionAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;UseTransactionsByDefaultAttribute&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;UseTransactionsByDefaultAttribute not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has anti forgery token attribute.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasAntiForgeryTokenAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;UseAntiForgeryTokenOnPostByDefault&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;UseAntiForgeryTokenOnPostByDefault not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasVersionAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;VersionAttribute&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;VersionAttribute not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Controller Class Tests&#xD;&#xA;&#xD;&#xA;        #region Controller Method Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerContainsExpectedNumberOfPublicMethods()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetMethods().Where(a =&gt; a.DeclaringType == controllerClass);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.Inconclusive(&quot;Tests are still being written. When done, remove this line.&quot;);&#xD;&#xA;            Assert.AreEqual(0, result.Count(), &quot;It looks like a method was added or removed from the controller.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        //Examples&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodLogOnContainsExpectedAttributes()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethod(&quot;LogOn&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    //var expectedAttribute = controllerMethod.GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    //Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(0, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodLogOutContainsExpectedAttributes()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethod(&quot;LogOut&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    //var expectedAttribute = controllerMethod.GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    //Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(0, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes1()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(0).GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(0).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(1, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes2()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(1).GetCustomAttributes(true).OfType&lt;HttpPostAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(1).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;HttpPostAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(2, allAttributes.Count(), &quot;More than expected custom attributes found.&quot;);&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes3()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(1).GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(1).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(2, allAttributes.Count(), &quot;More than expected custom attributes found.&quot;);&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        #endregion Controller Method Tests&#xD;&#xA;&#xD;&#xA;        #endregion Reflection Tests&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="ProjectName" expression="" initialRange="0" />
      <Variable name="Entity" expression="" initialRange="0" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="ControllerTests" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
  <Template uid="cc6b4e2d-bfc2-4c45-8430-adb8ce00ffc2" shortcut="" description="JasonRepositoryTest" text="using System;&#xD;&#xA;using System.Collections;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using $ProjectName$.Core.Domain;&#xD;&#xA;using $ProjectName$.Tests.Core;&#xD;&#xA;using $ProjectName$.Tests.Core.Extensions;&#xD;&#xA;using $ProjectName$.Tests.Core.Helpers;&#xD;&#xA;using Microsoft.VisualStudio.TestTools.UnitTesting;&#xD;&#xA;using FluentNHibernate.Testing;&#xD;&#xA;using UCDArch.Core.PersistanceSupport;&#xD;&#xA;using UCDArch.Data.NHibernate;&#xD;&#xA;using UCDArch.Testing.Extensions;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;	/// &lt;summary&gt;&#xD;&#xA;	/// Entity Name:		$Entity$&#xD;&#xA;	/// LookupFieldName:	$LookupField$&#xD;&#xA;	/// &lt;/summary&gt;&#xD;&#xA;	[TestClass]&#xD;&#xA;	public class $CLASS$ : AbstractRepositoryTests&lt;$Entity$, int, $Entity$Map&gt;&#xD;&#xA;	{&#xD;&#xA;		/// &lt;summary&gt;&#xD;&#xA;        /// Gets or sets the $Entity$ repository.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;value&gt;The $Entity$ repository.&lt;/value&gt;&#xD;&#xA;		public IRepository&lt;$Entity$&gt; $Entity$Repository { get; set; }&#xD;&#xA;		&#xD;&#xA;		#region Init and Overrides&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Initializes a new instance of the &lt;see cref=&quot;$Entity$RepositoryTests&quot;/&gt; class.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public $CLASS$()&#xD;&#xA;        {&#xD;&#xA;            $Entity$Repository = new Repository&lt;$Entity$&gt;();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Gets the valid entity of type T&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;counter&quot;&gt;The counter.&lt;/param&gt;&#xD;&#xA;        /// &lt;returns&gt;A valid entity of type T&lt;/returns&gt;&#xD;&#xA;        protected override $Entity$ GetValid(int? counter)&#xD;&#xA;        {&#xD;&#xA;            return CreateValidEntities.$Entity$(counter);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// A Query which will return a single record&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;numberAtEnd&quot;&gt;&lt;/param&gt;&#xD;&#xA;        /// &lt;returns&gt;&lt;/returns&gt;&#xD;&#xA;        protected override IQueryable&lt;$Entity$&gt; GetQuery(int numberAtEnd)&#xD;&#xA;        {&#xD;&#xA;            return $Entity$Repository.Queryable.Where(a =&gt; a.$LookupField$.EndsWith(numberAtEnd.ToString()));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// A way to compare the entities that were read.&#xD;&#xA;        /// For example, this would have the assert.AreEqual(&quot;Comment&quot; + counter, entity.Comment);&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;&#xD;&#xA;        /// &lt;param name=&quot;counter&quot;&gt;&lt;/param&gt;&#xD;&#xA;        protected override void FoundEntityComparison($Entity$ entity, int counter)&#xD;&#xA;        {&#xD;&#xA;            Assert.AreEqual(&quot;$LookupField$&quot; + counter, entity.$LookupField$);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Updates , compares, restores.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;entity&quot;&gt;The entity.&lt;/param&gt;&#xD;&#xA;        /// &lt;param name=&quot;action&quot;&gt;The action.&lt;/param&gt;&#xD;&#xA;        protected override void UpdateUtility($Entity$ entity, ARTAction action)&#xD;&#xA;        {&#xD;&#xA;            const string updateValue = &quot;Updated&quot;;&#xD;&#xA;            switch (action)&#xD;&#xA;            {&#xD;&#xA;                case ARTAction.Compare:&#xD;&#xA;                    Assert.AreEqual(updateValue, entity.$LookupField$);&#xD;&#xA;                    break;&#xD;&#xA;                case ARTAction.Restore:&#xD;&#xA;                    entity.$LookupField$ = RestoreValue;&#xD;&#xA;                    break;&#xD;&#xA;                case ARTAction.Update:&#xD;&#xA;                    RestoreValue = entity.$LookupField$;&#xD;&#xA;                    entity.$LookupField$ = updateValue;&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Loads the data.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        protected override void LoadData()&#xD;&#xA;        {&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            LoadRecords(5);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Init and Overrides	&#xD;&#xA;        &#xD;&#xA;        $END$&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;    #region Reflection of Database.&#xD;&#xA;&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Tests all fields in the database have been tested.&#xD;&#xA;    /// If this fails and no other tests, it means that a field has been added which has not been tested above.&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    [TestMethod]&#xD;&#xA;        public void TestAllFieldsInTheDatabaseHaveBeenTested()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var expectedFields = new List&lt;NameAndType&gt;();&#xD;&#xA;&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;Id&quot;, &quot;System.Int32&quot;, new List&lt;string&gt;&#xD;&#xA;            {&#xD;&#xA;                 &quot;[Newtonsoft.Json.JsonPropertyAttribute()]&quot;, &#xD;&#xA;                 &quot;[System.Xml.Serialization.XmlIgnoreAttribute()]&quot;&#xD;&#xA;            }));&#xD;&#xA;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            AttributeAndFieldValidation.ValidateFieldsAndAttributes(expectedFields, typeof($Entity$));&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Reflection of Database.	&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="ProjectName" expression="" initialRange="0" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="Entity" expression="" initialRange="1" />
      <Variable name="LookupField" expression="" initialRange="3" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="RepositoryTests" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
  <Template uid="f8b169af-e542-4ac9-88c2-6eae73786347" shortcut="" description="JasonControllerTest" text="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Web.Mvc;&#xD;&#xA;using System.Web.Routing;&#xD;&#xA;using $ProjectName$.Controllers;&#xD;&#xA;using $ProjectName$.Controllers.Filters;&#xD;&#xA;using $ProjectName$.Core.Domain;&#xD;&#xA;using $ProjectName$.Services;&#xD;&#xA;using Microsoft.VisualStudio.TestTools.UnitTesting;&#xD;&#xA;using MvcContrib.TestHelper;&#xD;&#xA;using Rhino.Mocks;&#xD;&#xA;using UCDArch.Core.PersistanceSupport;&#xD;&#xA;using UCDArch.Testing;&#xD;&#xA;using UCDArch.Web.Attributes;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;    [TestClass]&#xD;&#xA;    public class $CLASS$ : ControllerTestBase&lt;$Entity$Controller&gt;&#xD;&#xA;    {&#xD;&#xA;        private readonly Type _controllerClass = typeof($Entity$Controller);&#xD;&#xA;		public IRepository&lt;$Entity$&gt; $Entity$Repository;&#xD;&#xA;        //public IExampleService ExampleService;&#xD;&#xA;		//public IRepository&lt;Example&gt; ExampleRepository;&#xD;&#xA;&#xD;&#xA;        #region Init&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Setups the controller.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        protected override void SetupController()&#xD;&#xA;        {&#xD;&#xA;		    $Entity$Repository = FakeRepository&lt;$Entity$&gt;();&#xD;&#xA;            //ExampleService = MockRepository.GenerateStub&lt;IExampleService&gt;();  &#xD;&#xA;            Controller = new TestControllerBuilder().CreateController&lt;$Entity$Controller&gt;($Entity$Repository);&#xD;&#xA;			//Controller = new TestControllerBuilder().CreateController&lt;$Entity$Controller&gt;($Entity$Repository, ExampleService);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void RegisterRoutes()&#xD;&#xA;        {&#xD;&#xA;            RouteRegistrar.RegisterRoutes(RouteTable.Routes);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;		public $CLASS$()&#xD;&#xA;        {&#xD;&#xA;        //    ExampleRepository = FakeRepository&lt;Example&gt;();&#xD;&#xA;        //    Controller.Repository.Expect(a =&gt; a.OfType&lt;Example&gt;()).Return(ExampleRepository).Repeat.Any();&#xD;&#xA;&#xD;&#xA;			Controller.Repository.Expect(a =&gt; a.OfType&lt;$Entity$&gt;()).Return($Entity$Repository).Repeat.Any();	&#xD;&#xA;        }&#xD;&#xA;        #endregion Init&#xD;&#xA;&#xD;&#xA;        #region Mapping Tests&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestExampleMapping()&#xD;&#xA;        //{&#xD;&#xA;        //    &quot;~/$Entity$/YourMethod/&quot;.ShouldMapTo&lt;$Entity$Controller&gt;(a =&gt; a.YourMethod(null));&#xD;&#xA;        //}&#xD;&#xA;        #endregion Mapping Tests&#xD;&#xA;&#xD;&#xA;        #region Method Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestWriteMethodTests()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            Assert.Inconclusive(&quot;Need to write these tests&quot;);          &#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;&#xD;&#xA;            #endregion Assert		&#xD;&#xA;        }      &#xD;&#xA;        #endregion Method Tests&#xD;&#xA;&#xD;&#xA;        #region Reflection Tests&#xD;&#xA;&#xD;&#xA;        #region Controller Class Tests&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller inherits from application controller.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerInheritsFromApplicationController()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            Assert.IsNotNull(controllerClass.BaseType);&#xD;&#xA;            var result = controllerClass.BaseType.Name;&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(&quot;ApplicationController&quot;, result);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has only three attributes.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasOnlyThreeAttributes()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(3, result.Count());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has transaction attribute.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasTransactionAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;UseTransactionsByDefaultAttribute&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;UseTransactionsByDefaultAttribute not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the controller has anti forgery token attribute.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasAntiForgeryTokenAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;UseAntiForgeryTokenOnPostByDefault&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;UseAntiForgeryTokenOnPostByDefault not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerHasVersionAttribute()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetCustomAttributes(true).OfType&lt;VersionAttribute&gt;();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsTrue(result.Count() &gt; 0, &quot;VersionAttribute not found.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Controller Class Tests&#xD;&#xA;&#xD;&#xA;        #region Controller Method Tests&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void TestControllerContainsExpectedNumberOfPublicMethods()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var controllerClass = _controllerClass;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            var result = controllerClass.GetMethods().Where(a =&gt; a.DeclaringType == controllerClass);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.Inconclusive(&quot;Tests are still being written. When done, remove this line.&quot;);&#xD;&#xA;            Assert.AreEqual(0, result.Count(), &quot;It looks like a method was added or removed from the controller.&quot;);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        //Examples&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodLogOnContainsExpectedAttributes()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethod(&quot;LogOn&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    //var expectedAttribute = controllerMethod.GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    //Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(0, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodLogOutContainsExpectedAttributes()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethod(&quot;LogOut&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    //var expectedAttribute = controllerMethod.GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    //Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(0, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes1()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(0).GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(0).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(1, allAttributes.Count());&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes2()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(1).GetCustomAttributes(true).OfType&lt;HttpPostAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(1).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;HttpPostAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(2, allAttributes.Count(), &quot;More than expected custom attributes found.&quot;);&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;        //[TestMethod]&#xD;&#xA;        //public void TestControllerMethodCreateContainsExpectedAttributes3()&#xD;&#xA;        //{&#xD;&#xA;        //    #region Arrange&#xD;&#xA;        //    var controllerClass = _controllerClass;&#xD;&#xA;        //    var controllerMethod = controllerClass.GetMethods().Where(a =&gt; a.Name == &quot;Create&quot;);&#xD;&#xA;        //    #endregion Arrange&#xD;&#xA;&#xD;&#xA;        //    #region Act&#xD;&#xA;        //    var expectedAttribute = controllerMethod.ElementAt(1).GetCustomAttributes(true).OfType&lt;UserOnlyAttribute&gt;();&#xD;&#xA;        //    var allAttributes = controllerMethod.ElementAt(1).GetCustomAttributes(true);&#xD;&#xA;        //    #endregion Act&#xD;&#xA;&#xD;&#xA;        //    #region Assert&#xD;&#xA;        //    Assert.AreEqual(1, expectedAttribute.Count(), &quot;UserOnlyAttribute not found&quot;);&#xD;&#xA;        //    Assert.AreEqual(2, allAttributes.Count(), &quot;More than expected custom attributes found.&quot;);&#xD;&#xA;        //    #endregion Assert&#xD;&#xA;        //}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        #endregion Controller Method Tests&#xD;&#xA;&#xD;&#xA;        #endregion Reflection Tests&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="ProjectName" expression="" initialRange="0" />
      <Variable name="Entity" expression="" initialRange="0" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="ControllerTests" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
  <Template uid="cc6b4e2d-bfc2-4c45-8430-adb8ce00ffc2" shortcut="" description="JasonRepositoryTest" text="using System;&#xD;&#xA;using System.Collections;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using $ProjectName$.Core.Domain;&#xD;&#xA;using $ProjectName$.Tests.Core;&#xD;&#xA;using $ProjectName$.Tests.Core.Extensions;&#xD;&#xA;using $ProjectName$.Tests.Core.Helpers;&#xD;&#xA;using Microsoft.VisualStudio.TestTools.UnitTesting;&#xD;&#xA;using FluentNHibernate.Testing;&#xD;&#xA;using UCDArch.Core.PersistanceSupport;&#xD;&#xA;using UCDArch.Data.NHibernate;&#xD;&#xA;using UCDArch.Testing.Extensions;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;	/// &lt;summary&gt;&#xD;&#xA;	/// Entity Name:		$Entity$&#xD;&#xA;	/// LookupFieldName:	$LookupField$&#xD;&#xA;	/// &lt;/summary&gt;&#xD;&#xA;	[TestClass]&#xD;&#xA;	public class $CLASS$ : AbstractRepositoryTests&lt;$Entity$, int, $Entity$Map&gt;&#xD;&#xA;	{&#xD;&#xA;		/// &lt;summary&gt;&#xD;&#xA;        /// Gets or sets the $Entity$ repository.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;value&gt;The $Entity$ repository.&lt;/value&gt;&#xD;&#xA;		public IRepository&lt;$Entity$&gt; $Entity$Repository { get; set; }&#xD;&#xA;		&#xD;&#xA;		#region Init and Overrides&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Initializes a new instance of the &lt;see cref=&quot;$Entity$RepositoryTests&quot;/&gt; class.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        public $CLASS$()&#xD;&#xA;        {&#xD;&#xA;            $Entity$Repository = new Repository&lt;$Entity$&gt;();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Gets the valid entity of type T&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;counter&quot;&gt;The counter.&lt;/param&gt;&#xD;&#xA;        /// &lt;returns&gt;A valid entity of type T&lt;/returns&gt;&#xD;&#xA;        protected override $Entity$ GetValid(int? counter)&#xD;&#xA;        {&#xD;&#xA;            return CreateValidEntities.$Entity$(counter);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// A Query which will return a single record&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;numberAtEnd&quot;&gt;&lt;/param&gt;&#xD;&#xA;        /// &lt;returns&gt;&lt;/returns&gt;&#xD;&#xA;        protected override IQueryable&lt;$Entity$&gt; GetQuery(int numberAtEnd)&#xD;&#xA;        {&#xD;&#xA;            return $Entity$Repository.Queryable.Where(a =&gt; a.$LookupField$.EndsWith(numberAtEnd.ToString()));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// A way to compare the entities that were read.&#xD;&#xA;        /// For example, this would have the assert.AreEqual(&quot;Comment&quot; + counter, entity.Comment);&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;&#xD;&#xA;        /// &lt;param name=&quot;counter&quot;&gt;&lt;/param&gt;&#xD;&#xA;        protected override void FoundEntityComparison($Entity$ entity, int counter)&#xD;&#xA;        {&#xD;&#xA;            Assert.AreEqual(&quot;$LookupField$&quot; + counter, entity.$LookupField$);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Updates , compares, restores.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;param name=&quot;entity&quot;&gt;The entity.&lt;/param&gt;&#xD;&#xA;        /// &lt;param name=&quot;action&quot;&gt;The action.&lt;/param&gt;&#xD;&#xA;        protected override void UpdateUtility($Entity$ entity, ARTAction action)&#xD;&#xA;        {&#xD;&#xA;            const string updateValue = &quot;Updated&quot;;&#xD;&#xA;            switch (action)&#xD;&#xA;            {&#xD;&#xA;                case ARTAction.Compare:&#xD;&#xA;                    Assert.AreEqual(updateValue, entity.$LookupField$);&#xD;&#xA;                    break;&#xD;&#xA;                case ARTAction.Restore:&#xD;&#xA;                    entity.$LookupField$ = RestoreValue;&#xD;&#xA;                    break;&#xD;&#xA;                case ARTAction.Update:&#xD;&#xA;                    RestoreValue = entity.$LookupField$;&#xD;&#xA;                    entity.$LookupField$ = updateValue;&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Loads the data.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        protected override void LoadData()&#xD;&#xA;        {&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            LoadRecords(5);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Init and Overrides	&#xD;&#xA;        &#xD;&#xA;        $END$&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;    #region Reflection of Database.&#xD;&#xA;&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Tests all fields in the database have been tested.&#xD;&#xA;    /// If this fails and no other tests, it means that a field has been added which has not been tested above.&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    [TestMethod]&#xD;&#xA;        public void TestAllFieldsInTheDatabaseHaveBeenTested()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var expectedFields = new List&lt;NameAndType&gt;();&#xD;&#xA;&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;Id&quot;, &quot;System.Int32&quot;, new List&lt;string&gt;&#xD;&#xA;            {&#xD;&#xA;                 &quot;[Newtonsoft.Json.JsonPropertyAttribute()]&quot;, &#xD;&#xA;                 &quot;[System.Xml.Serialization.XmlIgnoreAttribute()]&quot;&#xD;&#xA;            }));&#xD;&#xA;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            AttributeAndFieldValidation.ValidateFieldsAndAttributes(expectedFields, typeof($Entity$));&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Reflection of Database.	&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="ProjectName" expression="" initialRange="0" />
      <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="Entity" expression="" initialRange="1" />
      <Variable name="LookupField" expression="" initialRange="3" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="RepositoryTests" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
</TemplatesExport>