<TemplatesExport family="Live Templates">
  <Template uid="f93811c3-c9bf-4dd7-8e77-8f0fdc150a3e" shortcut="JasonIListTests" description="ILists of entities Some tests will need to be removed depending on cascades" text="#region $Field$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$Field$WithAValueOfNullDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ record = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                record = GetValid(9);&#xD;&#xA;                record.$Field$ = null;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull(record);&#xD;&#xA;                Assert.AreEqual(record.$Field$, null);&#xD;&#xA;                var results = record.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$Field$: may not be null&quot;);&#xD;&#xA;                Assert.IsTrue(record.IsTransient());&#xD;&#xA;                Assert.IsFalse(record.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(NHibernate.TransientObjectException))]&#xD;&#xA;        public void Test$Field$WithANewValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ record = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                record = GetValid(9);&#xD;&#xA;                record.$Field$.Add(CreateValidEntities.$OtherEntity$(1));&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull(record);&#xD;&#xA;                Assert.IsNotNull(ex);&#xD;&#xA;                Assert.AreEqual(&quot;&quot;, ex.Message);&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;        #region Valid Tests&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Field$WithPopulatedListWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;			const int addedCount = 3;&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(CreateValidEntities.$OtherEntity$(i+1));&#xD;&#xA;            }&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNotNull(record.$Field$);&#xD;&#xA;            Assert.AreEqual(addedCount, record.$Field$.Count);&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;		[TestMethod]&#xD;&#xA;        public void Test$Field$WithPopulatedExistingListWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            var relatedRecords = new List&lt;$OtherEntity$&gt;();&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                relatedRecords.Add(CreateValidEntities.$OtherEntity$(i + 1));&#xD;&#xA;                relatedRecords[i].$Entity$ = record;&#xD;&#xA;                Repository.OfType&lt;$OtherEntity$&gt;().EnsurePersistent(relatedRecords[i]);&#xD;&#xA;            }&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNotNull(record.$Field$);&#xD;&#xA;            Assert.AreEqual(addedCount, record.$Field$.Count);&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Field$WithEmptyListWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNotNull(record.$Field$);&#xD;&#xA;            Assert.AreEqual(0, record.$Field$.Count);&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;        #region Cascade Tests&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Entity$CascadesSaveTo$OtherEntity$()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var count = Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count();&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(CreateValidEntities.$OtherEntity$(i+1));&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            record = $Entity$Repository.GetNullableById(saveId);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsNotNull(record);&#xD;&#xA;            Assert.AreEqual(addedCount, record.$Field$.Count);&#xD;&#xA;            Assert.AreEqual(count + addedCount, Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Entity$CascadesUpdateTo$OtherEntity$1()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var count = Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count();&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(CreateValidEntities.$OtherEntity$(i+1));&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            var saveRelatedId = record.$Field$[1].Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            record = $Entity$Repository.GetNullableById(saveId);&#xD;&#xA;            record.$Field$[1].$SubField$ = &quot;Updated&quot;;&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(count + addedCount, Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count());&#xD;&#xA;            var relatedRecord = Repository.OfType&lt;$OtherEntity$&gt;().GetNullableById(saveRelatedId);&#xD;&#xA;            Assert.IsNotNull(relatedRecord);&#xD;&#xA;            Assert.AreEqual(&quot;Updated&quot;, relatedRecord.$SubField$);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;		[TestMethod]&#xD;&#xA;        public void Test$Entity$CascadesUpdateTo$OtherEntity$2()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var count = Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count();&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            var relatedRecords = new List&lt;$OtherEntity$&gt;();&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                relatedRecords.Add(CreateValidEntities.$OtherEntity$(i + 1));&#xD;&#xA;                relatedRecords[i].$Entity$ = record;&#xD;&#xA;                Repository.OfType&lt;$OtherEntity$&gt;().EnsurePersistent(relatedRecords[i]);&#xD;&#xA;            }&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            var saveRelatedId = record.$Field$[1].Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                NHibernateSessionManager.Instance.GetSession().Evict(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            record = $Entity$Repository.GetNullableById(saveId);&#xD;&#xA;            record.$Field$[1].$SubField$ = &quot;Updated&quot;;&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                NHibernateSessionManager.Instance.GetSession().Evict(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(count + addedCount, Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count());&#xD;&#xA;            var relatedRecord2 = Repository.OfType&lt;$OtherEntity$&gt;().GetNullableById(saveRelatedId);&#xD;&#xA;            Assert.IsNotNull(relatedRecord2);&#xD;&#xA;            Assert.AreEqual(&quot;Updated&quot;, relatedRecord2.$SubField$);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Does Remove it (Delete this test, or the one below)&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Entity$CascadesUpdateRemove$OtherEntity$()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var count = Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count();&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            var relatedRecords = new List&lt;$OtherEntity$&gt;();&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                relatedRecords.Add(CreateValidEntities.$OtherEntity$(i + 1));&#xD;&#xA;                relatedRecords[i].$Entity$ = record;&#xD;&#xA;                Repository.OfType&lt;$OtherEntity$&gt;().EnsurePersistent(relatedRecords[i]);&#xD;&#xA;            }&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            var saveRelatedId = record.$Field$[1].Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            record = TemplateRepository.GetNullableById(saveId);&#xD;&#xA;            record.$Field$.RemoveAt(1);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(count + (addedCount-1), Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count());&#xD;&#xA;            var relatedRecord2 = Repository.OfType&lt;$OtherEntity$&gt;().GetNullableById(saveRelatedId);&#xD;&#xA;            Assert.IsNull(relatedRecord2);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Does NOT Remove it&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Entity$DoesNotCascadesUpdateRemove$OtherEntity$()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var count = Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count();&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            var relatedRecords = new List&lt;$OtherEntity$&gt;();&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                relatedRecords.Add(CreateValidEntities.$OtherEntity$(i + 1));&#xD;&#xA;                relatedRecords[i].$Entity$ = record;&#xD;&#xA;                Repository.OfType&lt;$OtherEntity$&gt;().EnsurePersistent(relatedRecords[i]);&#xD;&#xA;            }&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            var saveRelatedId = record.$Field$[1].Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            record = TemplateRepository.GetNullableById(saveId);&#xD;&#xA;            record.$Field$.RemoveAt(1);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(count + (addedCount), Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count());&#xD;&#xA;            var relatedRecord2 = Repository.OfType&lt;$OtherEntity$&gt;().GetNullableById(saveRelatedId);&#xD;&#xA;            Assert.IsNotNull(relatedRecord2);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$Entity$CascadesDeleteTo$OtherEntity$()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var count = Repository.OfType&lt;ReportColumn&gt;().Queryable.Count();&#xD;&#xA;            $Entity$ record = GetValid(9);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            const int addedCount = 3;&#xD;&#xA;            var relatedRecords = new List&lt;$OtherEntity$&gt;();&#xD;&#xA;            for (int i = 0; i &lt; addedCount; i++)&#xD;&#xA;            {&#xD;&#xA;                relatedRecords.Add(CreateValidEntities.$OtherEntity$(i + 1));&#xD;&#xA;                relatedRecords[i].$Entity$ = record;&#xD;&#xA;                Repository.OfType&lt;$OtherEntity$&gt;().EnsurePersistent(relatedRecords[i]);&#xD;&#xA;            }&#xD;&#xA;            foreach (var relatedRecord in relatedRecords)&#xD;&#xA;            {&#xD;&#xA;                record.$Field$.Add(relatedRecord);&#xD;&#xA;            }&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            var saveId = record.Id;&#xD;&#xA;            var saveRelatedId = record.$Field$[1].Id;&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            record = $Entity$Repository.GetNullableById(saveId);&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.Remove(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            NHibernateSessionManager.Instance.GetSession().Evict(record);&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual(count, Repository.OfType&lt;$OtherEntity$&gt;().Queryable.Count());&#xD;&#xA;            var relatedRecord = Repository.OfType&lt;$OtherEntity$&gt;().GetNullableById(saveRelatedId);&#xD;&#xA;            Assert.IsNull(relatedRecord);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;		&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        #endregion Cascade Tests&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;expectedFields.Add(new NameAndType(&quot;$Field$&quot;, &quot;System.Collections.Generic.IList`1[$Gramps$.Core.Domain.$OtherEntity$]&quot;, new List&lt;string&gt;&#xD;&#xA;{&#xD;&#xA;    &quot;[NHibernate.Validator.Constraints.NotNullAttribute()]&quot;&#xD;&#xA;}));&#xD;&#xA;*/&#xD;&#xA;#endregion ReportColumns Tests&#xD;&#xA;&#xD;&#xA;" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="Field" expression="" initialRange="2" />
      <Variable name="OtherEntity" expression="" initialRange="4" />
      <Variable name="SubField" expression="" initialRange="0" />
      <Variable name="Gramps" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
</TemplatesExport>