<TemplatesExport family="Live Templates">
  <Template uid="b73c5a64-8cf1-4bb5-bf86-78bcbb216ef2" shortcut="JasonStringTests" description="A group of Repository  tests typical for the Name Field" text="        #region $FieldToTest$ Tests&#xD;&#xA;        #region Invalid Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with null value does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithNullValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = null;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: may not be null or empty&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with empty string does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithEmptyStringDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = string.Empty;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: may not be null or empty&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with spaces only does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithSpacesOnlyDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = &quot; &quot;;&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: may not be null or empty&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with too long value does not save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        [ExpectedException(typeof(ApplicationException))]&#xD;&#xA;        public void Test$FieldToTest$WithTooLongValueDoesNotSave()&#xD;&#xA;        {&#xD;&#xA;            $Entity$ $entityVariable$ = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                #region Arrange&#xD;&#xA;                $entityVariable$ = GetValid(9);&#xD;&#xA;                $entityVariable$.$FieldToTest$ = &quot;x&quot;.RepeatTimes(($MaxLength$ + 1));&#xD;&#xA;                #endregion Arrange&#xD;&#xA;&#xD;&#xA;                #region Act&#xD;&#xA;                $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;                $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;                $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;                #endregion Act&#xD;&#xA;            }&#xD;&#xA;            catch (Exception)&#xD;&#xA;            {&#xD;&#xA;                Assert.IsNotNull($entityVariable$);&#xD;&#xA;                Assert.AreEqual($MaxLength$ + 1, $entityVariable$.$FieldToTest$.Length);&#xD;&#xA;                var results = $entityVariable$.ValidationResults().AsMessageList();&#xD;&#xA;                results.AssertErrorsAre(&quot;$FieldToTest$: length must be between 0 and $MaxLength$&quot;);&#xD;&#xA;                Assert.IsTrue($entityVariable$.IsTransient());&#xD;&#xA;                Assert.IsFalse($entityVariable$.IsValid());&#xD;&#xA;                throw;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion Invalid Tests&#xD;&#xA;&#xD;&#xA;        #region Valid Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with one character saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithOneCharacterSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot;x&quot;;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $FieldToTest$ with long value saves.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$FieldToTest$WithLongValueSaves()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var $entityVariable$ = GetValid(9);&#xD;&#xA;            $entityVariable$.$FieldToTest$ = &quot;x&quot;.RepeatTimes($MaxLength$);&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent($entityVariable$);&#xD;&#xA;            $Entity$Repository.DbContext.CommitTransaction();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.AreEqual($MaxLength$, $entityVariable$.$FieldToTest$.Length);&#xD;&#xA;            Assert.IsFalse($entityVariable$.IsTransient());&#xD;&#xA;            Assert.IsTrue($entityVariable$.IsValid());&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion Valid Tests&#xD;&#xA;        #endregion $FieldToTest$ Tests&#xD;&#xA;        /*&#xD;&#xA;            expectedFields.Add(new NameAndType(&quot;$FieldToTest$&quot;, &quot;System.String&quot;, new List&lt;string&gt;&#xD;&#xA;            {&#xD;&#xA;                 &quot;[NHibernate.Validator.Constraints.LengthAttribute((Int32)$MaxLength$)]&quot;, &#xD;&#xA;                 &quot;[UCDArch.Core.NHibernateValidator.Extensions.RequiredAttribute()]&quot;&#xD;&#xA;            }));&#xD;&#xA;        */" reformat="False" shortenQualifiedReferences="True">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="FieldToTest" expression="" initialRange="3" />
      <Variable name="entityVariable" expression="decapitalize(Entity)" initialRange="-1" />
      <Variable name="MaxLength" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
</TemplatesExport>