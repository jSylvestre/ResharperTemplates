<TemplatesExport family="Live Templates">
  <Template uid="829089bc-09df-4276-93a9-0c8570d4bbce" shortcut="JasonDateTests" description="Test past, current, and future dates when not nullable are valid" text="        #region $DateToTest$ Tests&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $DateToTest$ with past date will save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$DateToTest$WithPastDateWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var compareDate = DateTime.Now.AddDays(-10);&#xD;&#xA;            $Entity$ record = GetValid(99);&#xD;&#xA;            record.$DateToTest$ = compareDate;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(compareDate, record.$DateToTest$);&#xD;&#xA;            #endregion Assert		&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $DateToTest$ with current date date will save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$DateToTest$WithCurrentDateDateWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var compareDate = DateTime.Now;&#xD;&#xA;            var record = GetValid(99);&#xD;&#xA;            record.$DateToTest$ = compareDate;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(compareDate, record.$DateToTest$);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Tests the $DateToTest$ with future date date will save.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        [TestMethod]&#xD;&#xA;        public void Test$DateToTest$WithFutureDateDateWillSave()&#xD;&#xA;        {&#xD;&#xA;            #region Arrange&#xD;&#xA;            var compareDate = DateTime.Now.AddDays(15);&#xD;&#xA;            var record = GetValid(99);&#xD;&#xA;            record.$DateToTest$ = compareDate;&#xD;&#xA;            #endregion Arrange&#xD;&#xA;&#xD;&#xA;            #region Act&#xD;&#xA;            $Entity$Repository.DbContext.BeginTransaction();&#xD;&#xA;            $Entity$Repository.EnsurePersistent(record);&#xD;&#xA;            $Entity$Repository.DbContext.CommitChanges();&#xD;&#xA;            #endregion Act&#xD;&#xA;&#xD;&#xA;            #region Assert&#xD;&#xA;            Assert.IsFalse(record.IsTransient());&#xD;&#xA;            Assert.IsTrue(record.IsValid());&#xD;&#xA;            Assert.AreEqual(compareDate, record.$DateToTest$);&#xD;&#xA;            #endregion Assert&#xD;&#xA;        }&#xD;&#xA;        #endregion $DateToTest$ Tests&#xD;&#xA;        //expectedFields.Add(new NameAndType(&quot;$DateToTest$&quot;, &quot;System.DateTime&quot;, new List&lt;string&gt;()));" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables>
      <Variable name="Entity" expression="" initialRange="0" />
      <Variable name="DateToTest" expression="" initialRange="3" />
    </Variables>
    <CustomProperties />
  </Template>
</TemplatesExport>